hexchat

0. Protocol Overview
This protocol uses an xmpp chat service as a means to forward tcp traffic from one computer to another. It listens on a port on one computer and forwards data through a chat server to another computer logged into the same chat server. 

All data concerning the local ip:port, remote ip:port, and various JIDs the computer is using to access the chat server are put in individual stanzas. This information is present in every xmpp message exchanged between hexchat bots and will be collectively referred to as the "header", and is used to construct a key in the bot's routing table. The values in the routing table are asyncore dispatchers that can read and write information to a socket. Unless stated otherwise, each xmpp message described in this docuement should be assumed to contain a header. Furthermore, the header should be assumed to be enclosed in the child of the root xml element (which can be assumed to have no siblings). This is illustrated below:
<iq....>
    <only_child...>
       header stanzs
       other stanzas
    </only_child>
</iq>

Each stanza in the header will be discussed in the appendix.

1. Motivation
Many countries that censor their citizens' internet access allow access to xmpp chat servers such as google chat. With the appropriate software, these chat servers can be used to connect and relay traffic to tor bridges. Since most xmpp servers support encryption, it would be difficult stop tor traffic from being relayed through xmpp chat servers without blocking access to the chat server itself. 

2. Connecting
a. The client sends a connection request to the server
When a client initiates a connection to an ip:port running hexchat, a connection request is sent to the appropriate JID on the chat server. If the full JID of the recipient is known, the the connection request is sent in an IQ stanza with its type set to "set", otherwise it is sent in a message stanza with its type set to "groupchat". A stanza called "connect" is created within this IQ or message stanza. The "connect" stanza's xmlns is set to "hexchat:connect". A "maxsize" stanza containing the computer's sys.maxsize is created within the "connect" stanza. The client creates an entry in its table of pending connections with the following key-value pair:
((local ip, local port), bare JID of the recipient of the connection request, (remote ip, remote port)) ==> connected socket

The client then waits for a "connect_ack" response described in 2b.

b. The server acknowledges the request and indicates whether the connection succeeded
When a hexchat bot recieves a connection request, it constructs a key from the header. If that key is not in its routing table, it tries to connect to the appropriate ip:port specified in the "remote_ip" and "remote_port" stanzas in the header. The server then sends back an IQ stanza with its type set to "result". This stanza contains a "connect_ack" stanza with its xmlns set to "hexchat:connect_ack". The "connect_ack" stanza contains a "id" stanza. If the connection succeeded, the response stanza contains the computer's sys.maxsize, otherwise, it contains the string "failure".

c. The client recieves a connection acknowledgement
When a bot recieves a "connect_ack" stanza enclosed in the appropriate IQ, it checks to see if any key composed of the remote ip and port, local ip and port, and a JID found in the aliases stanza (all of which are specified in stanzas in the header) matches a key in its table of pending connections. If it finds key that matches a key in its pending connections table and the "id" stanza does not read "failure", it proceeds to create an entry in its routing table with the following key-value pair:
((local ip, local port), set of aliases specified in the header, (remote ip, remote port)) ==> asyncore dispatcher that reads and writes to the appropriate socket

If the response stanza reads "failure" it closes the socket in the pending connections table and deletes the entry from the pending connections table.

4. Data Exchange
a. Data is read from a socket
i)	Data is read from a socket and added to a buffer, which is periodically checked.
ii)	When data is found in the buffer or the cache, the buffered data is added to the cached data, the length of the buffered data (if greater than zero) is appended to a separate list of cache lengths, and the current time is appended to a list of timestamps. The buffer is then cleared.
ii) 	All cached data is compressed, base 64 encoded, and put in a "data" stanza.
iii)	All the lengths of each cache is comma separated in a "chunks" stanza.
iv)	An IQ message is created with its type set to "set", its xmlns set to "hexchat:packet", and its id set to the following quantity: ((the id of the last IQ sent that contained data) + 1) mod sys.maxsize
v)	The "data" and chunk" stanzas are appended to the IQ message in a "packet" stanza.
vi)	A header is constructed and appended to the "packet" stanza.
vii)	The recipient of the message is selected from the list of aliases provided in the header during the connection process. Specifically, the bot rotates through each entry of this list every time an IQ is sent.
viii)	The sender of the message is selected from a list of accounts connected to the chat server. Specifically, the bot rotates through each each of its connected accounts each time it sends any kind of message. 
ix)	The message is sent over the chat server 

b. Data is recieved from the chat server
i)	The bot constructs a key from the header. If the key is found in its routing table, it proceeds to (ii). Otherwise, it sends a disconnect request (see part 5).
ii)	The bot computes the quantity: "id of the IQ stanza" - "last id received with the same header". Call this quantity "id_diff"
iii)	If id_diff<=0 and id_diff>=-"sender's sys.maxsize"/2, then the message is declared redundant and a confirmation is sent regarding the id of the IQ containing the most recent data (i.e. *not* the id of the message that was just received). Otherwise, the bot moves on to (iv)
iv)	id_diff mod "peer's sys.maxsize" is computed. The result represents the number of new chunks of data.
v)	The number of bytes of data to ignore is computed from the number of new chunks of data computed in (iv) and the list of chunk sizes in the "chunks" stanza.
vi)	The data is decoded from base 64, and unzipped while discarding the number of bytes computed in (d).
vii)    A confirmation message is sent. This message is an IQ with its type set to "result". The IQ stanza contains another stanza called "data_ack" with its xmlns set to "hexchat:data_ack". Inside the "data_ack" stanza is a stanza called "id" which contains the id of the IQ message recieved.
viii)	The data is sent to the appropriate socket.

c. An acknowledgement of data is recieved
i)	The bot constructs a key from the header. If the key is found in its routing table, it proceeds to (ii).
ii)	The bot computes the quantity: "number in response stanza" - "id of last message sent that contained data" mod sys.maxsize.
iii)	The bot subtracts the quantity computed in (ii) from the number of caches stored. If this quantity is positive, the bot moves on to (iv)
iv)	Compute the difference between the current time stamp and the time stamp recorded "result of (iii)" - 1 records ago.
v)	Set the new throttle rate (rate at which the socket's buffer and caches are checked) to F(result of (iv)), where
        F(x)=(MIN THROTTLE RATE + arctan(x * 2 * "Number of connected JIDs" / (MIN THROTTLE RATE + MAX THROTTLE RATE)) * 2 * (MAX THROTTLE RATE-MIN THROTTLE RATE) / Pi)
	/ "Number of connected JIDs"
	, where:
	MIN THROTTLE RATE	= The minimum time any one JID should wait between sending messages to the same recipient = 1.0 seconds (this value seems to work well)
	MAX THROTTLE RATE	= The maximum time any one JID should wait between sending messages to the same recipient = 3.0 seconds (this value seems to work well)
	Number of connected JIDs= The number of accounts the bot has connected to the server
	Pi			=3.14... 
        The function, F, rescales the throttle rate so that it never goes above MAX THROTTLE RATE/Number of connected JIDs or below MIN THROTTLE RATE/Number of connected JIDs
vi)	The maximum number of bytes the socket reads at any given recv call adjusted so that garbage collection need not happen for a certain minimum amount of time. This 		is given by:
	recv rate =  floor(MAX DATA/NUM CACHES * ASYNCORE LOOP RATE/throttle rate)
	, where:
	MAX DATA  	   = maximum data that can be sent over the chat server at once (seems to be within a factor of 2 of 2^17 bytes)
	NUM CACHES	   = minimum number of caches MAX DATA should be distributed over. This should be a small integer. (1 is fine)
	ASYNCORE LOOP RATE = The rate at which the socket is polled (can be anywhere between 0.001 and 0.1 seconds)
vii)	The appropriate number of caches are cleared along with their recorded data lengths and time stamps (see 4a).

5. Disconnecting
a. A socket closes
When a socket closes, an iq with its type set to "set" is created and a stanza called "disconnect" with xmlns set to "hexchat:disconnect" is created in side of it. A header is constructed within the disconnect stanza and the iq is sent to a random JID selected from the socket's key in the routing table.

b. A disconnect request is received
When a disconnect stanza is recieved, a key is constructed from the header. If the key is found in the routing table, the associated socket is closed and the entry deleted from the routing table.

6. Header Stanzas
The header stanzas contain the following stanzas:
stanza		==>	text
local_ip	==>	local ip
local_port	==>	local port
remote_ip	==>	remote ip
remote_port	==>	remote port
aliases		==>	Comma separated list of JIDs the bot has used to connect to the chat server

5. Acknowledgments
Thanks to asn, xnyhps, and the other tor developers for encoraging this idea and all of the useful feedback.
